[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "yatracker"
dynamic = ["version"]
description = "Async client for Yandex Tracker API"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [
    { name = "Oleg Abramov", email = "oleg@trueweb.app" },
]
maintainers = [
    { name = "Oleg Abramov", email = "oleg@trueweb.app" },
]
keywords = [
    "Yandex",
    "Tracker",
    "API",
    "async",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Framework :: AsyncIO",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]

dependencies = [
    "aiohttp~=3.8.5",
    "certifi>=2023",
    "msgspec~=0.18.2",
]

[project.optional-dependencies]
dev = [
    "ruff>=0",
    "black>=23",
    "mypy>=1",
    "pre-commit>=3",
]
test = [
    "coverage>=7",
    "pytest>=7",
    "pytest-asyncio>=0",
    "pytest-cov>=4",
]
docs = [
    "mkdocs-material",
    "mkdocstrings[python]",
]


[project.urls]
Repository = "https://github.com/Olegt0rr/YaTracker/"
Documentation = "https://olegt0rr.github.io/YaTracker/"

[tool.hatch.version]
path = "yatracker/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
]

[tool.hatch.envs.default]
features = [
    "dev",
    "test",
]
post-install-commands = [
    "pre-commit install",
]

[tool.hatch.envs.default.scripts]
reformat = [
    "black yatracker tests",
]
lint = [
    "ruff check yatracker --fix",
    "ruff check tests --fix",
]

[tool.hatch.envs.dev]
python = "3.11"
features = [
    "dev",
    "test",
]

[[tool.hatch.envs.test.matrix]]
python = ["310", "311"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = false
parallel = true
omit = [
    "aiogram/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | venv
  | build
  | dist
)/
'''

[tool.mypy]
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
pretty = true

[[tool.mypy.overrides]]
module = "*.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "examples.*"
ignore_errors = true


[tool.ruff]
src = ["app", "tools", "tests"]
select = ["ALL"]
ignore = ["A003", "ANN002", "ANN003", "ANN101", "ANN102", "D100", "D101", "D106", "D107", "D104", "D203", "D213", "RUF001", "RUF002", "RUF003", "S101", "TCH001", "TCH002", "PT015", "PT017", "B011"]
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.flake8-type-checking]
runtime-evaluated-base-classes = ["msgspec.Struct", "yatracker.types.base.Base"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "INP001"]
"tools/*" = ["INP001"]
"examples/*" = ["INP001", "T201"]
